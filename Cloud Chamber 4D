{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":5,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/cloud-chamber4d?scriptVersionId=263584794\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"id":"ef244c0c","cell_type":"markdown","source":"\n# Cloud Chamber 4D: Particle Track Simulator\n\nWelcome to a laboratory-in-a-notebook. Here you can **simulate** a classic **cloud chamber** with a modern spin:\n\n- **3D tracks** in a uniform magnetic field (helices, curvatures by charge and momentum).\n- **Before / During / After** views of a synthetic collision at the origin.\n- **Decays, scatters, and absorptions** — tracks that kink, split, or vanish.\n- **Hyperspectral “fog”**: a synthetic spectral cube \\(I(x, y, \\lambda)\\) with a wavelength slider.\n- **Interactive controls** powered by `ipywidgets` (when available).\n\n> **Pedagogy first.** This is a **toy** model intended to build intuition: curvature \\(\\propto 1/p_T\\), higher ionization for slow, heavy particles, and how decays create displaced vertices. Real detectors are more complex; this is your sandbox.\n","metadata":{}},{"id":"282c8d51","cell_type":"markdown","source":"\n## 0) Setup\nRun this cell to import packages. If `ipywidgets` is unavailable, you can still call the functions directly.\n","metadata":{}},{"id":"4ce760db","cell_type":"code","source":"import math\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom dataclasses import dataclass\nfrom typing import List, Tuple, Optional\n\ntry:\n    from ipywidgets import interact, interactive_output, FloatSlider, IntSlider, Dropdown, Checkbox, VBox, HBox, Button, Layout, Play, jslink\n    WIDGETS = True\nexcept Exception:\n    WIDGETS = False\n\n# For 3D plots\nfrom mpl_toolkits.mplot3d import Axes3D  # noqa: F401\n\nnp.random.seed(7)\nprint(\"Widgets available:\", WIDGETS)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T16:17:54.153696Z","iopub.execute_input":"2025-09-23T16:17:54.153955Z","iopub.status.idle":"2025-09-23T16:17:54.303786Z","shell.execute_reply.started":"2025-09-23T16:17:54.153934Z","shell.execute_reply":"2025-09-23T16:17:54.303092Z"}},"outputs":[{"name":"stdout","text":"Widgets available: True\n","output_type":"stream"}],"execution_count":1},{"id":"98554f8c","cell_type":"markdown","source":"\n## 1) Cloud-Chamber Primer (Tiny)\n\n- **Magnetic field \\( \\vec{B} = (0, 0, B_z) \\)** bends charged particles into **helices**. The **radius** \\(r\\) satisfies: \\( r = \\frac{p_T}{|q|B} \\).\n- The **handedness** of the spiral flips with the **charge sign**.\n- **dE/dx (ionization)** roughly grows when speed decreases; we mimic this by making intensity \\(\\propto 1/\\beta\\) with a cap.\n- **Decays / interactions** create **kinks** (sudden direction change) and **displaced vertices** (split-offs away from origin).\n- **Absorption**: low-energy tracks can “fade” (terminate) when kinetic energy drops below a threshold.\n\nWe’ll use simple units so that you can focus on shape and behavior, not unit conversions.\n","metadata":{}},{"id":"cda796ff","cell_type":"code","source":"@dataclass\nclass Particle:\n    pos: np.ndarray      # 3-vector position\n    mom: np.ndarray      # 3-vector momentum\n    q: float             # charge (±1 for simplicity)\n    m: float             # mass\n    alive: bool = True\n    species: str = \"π±\"\n    decay_prob: float = 0.0008   # per step chance to decay/split\n    scatter_prob: float = 0.0006 # per step chance to scatter (small direction change)\n    absorb_E_min: float = 0.25   # below this KE → absorb (terminate)\n    spectrum_shift: float = 0.0  # shift in spectral peak (arbitrary units)\n\ndef step_particle(p: Particle, Bz: float, dt: float, loss_coeff: float) -> None:\n    \"\"\"\n    Advance a particle one Euler step with a uniform B field along z.\n    Momentum update via Lorentz force: dp/dt = q v × B (units-scaled).\n    Energy loss implemented via fractional loss_coeff per step (crudely).\n    \"\"\"\n    if not p.alive:\n        return\n\n    # Velocity from momentum: v = p / sqrt(p^2 + m^2)  (c=1 units)\n    p_mag = np.linalg.norm(p.mom) + 1e-12\n    E = np.sqrt(p_mag**2 + p.m**2)\n    v = p.mom / E\n\n    # Lorentz force with B=(0,0,Bz): dp/dt = q * (v × B)\n    vx, vy, vz = v\n    Fx = p.q * (vy * Bz)\n    Fy = p.q * (-vx * Bz)\n    Fz = 0.0\n\n    # Update momentum and position\n    p.mom = p.mom + dt * np.array([Fx, Fy, Fz])\n    p.pos = p.pos + dt * v\n\n    # Crude continuous energy loss (proportional to current momentum)\n    p.mom *= (1.0 - loss_coeff*dt)\n    # Terminate if KE too small\n    p_mag = np.linalg.norm(p.mom)\n    E = np.sqrt(p_mag**2 + p.m**2)\n    KE = E - p.m\n    if KE < p.absorb_E_min:\n        p.alive = False\n\ndef maybe_decay_or_scatter(p: Particle) -> List[Particle]:\n    \"\"\"\n    Randomly scatter (small deflection) or decay/split into two daughters.\n    Returns [p] if unchanged, or [p, daughters...] if decay happened.\n    \"\"\"\n    if not p.alive:\n        return [p]\n\n    out = [p]\n    # Scatter: small random rotation of momentum\n    if np.random.rand() < p.scatter_prob:\n        axis = np.random.randn(3); axis /= (np.linalg.norm(axis) + 1e-12)\n        angle = np.random.normal(0.0, 0.08)  # small radians\n        # Rodrigues rotation\n        kx, ky, kz = axis\n        K = np.array([[0, -kz, ky],[kz, 0, -kx],[-ky, kx, 0]])\n        R = np.eye(3) + np.sin(angle)*K + (1-np.cos(angle))*(K@K)\n        p.mom = R @ p.mom\n\n    # Decay/split\n    if np.random.rand() < p.decay_prob:\n        p.alive = False  # parent stops at vertex\n        # Two daughters sharing momentum with random split & opening\n        mom_mag = np.linalg.norm(p.mom)\n        dir0 = p.mom/(mom_mag+1e-12)\n        # Small random opening angle for daughters\n        def rand_dir_around(d, spread=0.35):\n            # random rotation by ~spread radians\n            axis = np.random.randn(3); axis /= (np.linalg.norm(axis)+1e-12)\n            angle = np.abs(np.random.normal(spread, 0.15))\n            kx, ky, kz = axis\n            K = np.array([[0, -kz, ky],[kz, 0, -kx],[-ky, kx, 0]])\n            R = np.eye(3) + np.sin(angle)*K + (1-np.cos(angle))*(K@K)\n            v = R @ d\n            return v/ (np.linalg.norm(v)+1e-12)\n\n        frac = np.clip(np.random.beta(2,2), 0.2, 0.8)\n        d1 = rand_dir_around(dir0, spread=0.35)\n        d2 = rand_dir_around(-dir0, spread=0.35)\n        q1 = np.random.choice([-1,1])\n        q2 = -q1\n        m_child = max(0.2, p.m*0.6 + np.random.rand()*0.2)\n        mom1 = d1 * mom_mag * frac\n        mom2 = d2 * mom_mag * (1-frac)\n        daughter1 = Particle(pos=p.pos.copy(), mom=mom1, q=q1, m=m_child, species=\"daughter\", spectrum_shift=0.25*q1)\n        daughter2 = Particle(pos=p.pos.copy(), mom=mom2, q=q2, m=m_child, species=\"daughter\", spectrum_shift=-0.25*q1)\n        out.extend([daughter1, daughter2])\n    return out\n\ndef generate_event_cloud(n_primaries=2, secondaries=80, Bz=0.6, p0=3.5, spread=0.6) -> List[Particle]:\n    \"\"\"\n    Create a 'before/during/after' collision event.\n    - Two primaries approach the origin along ±z.\n    - At the origin (time ~0), create a spray of charged secondaries with random charges.\n    \"\"\"\n    parts: List[Particle] = []\n    # Primaries (before)\n    pz = p0\n    prim1 = Particle(pos=np.array([0.0,0.0,-2.0]), mom=np.array([0.0,0.0, +pz]), q=+1, m=0.8, species=\"beam+\")\n    prim2 = Particle(pos=np.array([0.0,0.0,+2.0]), mom=np.array([0.0,0.0, -pz]), q=-1, m=0.8, species=\"beam-\")\n    parts.extend([prim1, prim2])\n\n    # Secondaries (during/post): isotropic directions\n    for _ in range(secondaries):\n        theta = np.arccos(np.random.uniform(-1,1))\n        phi = np.random.uniform(0, 2*np.pi)\n        d = np.array([np.sin(theta)*np.cos(phi), np.sin(theta)*np.sin(phi), np.cos(theta)])\n        pt = np.abs(np.random.normal(p0*0.6, p0*spread))\n        q = np.random.choice([-1,1], p=[0.55,0.45])\n        m = np.random.uniform(0.2, 1.2)\n        parts.append(Particle(pos=np.zeros(3), mom=d*pt, q=q, m=m, species=\"sec\", spectrum_shift=0.15*q))\n    return parts\n\ndef simulate(parts: List[Particle], Bz: float=0.6, dt: float=0.03, steps: int=400,\n             loss_coeff: float=0.02) -> Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray, List[List[int]]]:\n    \"\"\"\n    Step all particles, recording tracks and building connectivity.\n    Returns:\n      X, Y, Z: arrays of shape (N_tracks, T_max) with NaNs for padding,\n      I: ionization intensity (same shape),\n      families: list of index-lists representing branching (for optional use).\n    \"\"\"\n    tracks = []\n    intens = []\n    families = []\n    frontier = [(i, p) for i, p in enumerate(parts)]\n    next_id = len(frontier)\n\n    for _ in range(steps):\n        new_ps = []\n        for track_id, p in frontier:\n            if not p.alive:\n                continue\n            # Record\n            tracks.append(p.pos.copy())\n            # ionization ~ 1/beta (capped)\n            p_mag = np.linalg.norm(p.mom) + 1e-12\n            E = np.sqrt(p_mag**2 + p.m**2)\n            beta = p_mag / (E + 1e-12)\n            I = min(4.0, 1.0/(beta + 0.05))\n            intens.append([track_id, I])\n            # Step + stochastic processes\n            step_particle(p, Bz, dt, loss_coeff)\n            out = maybe_decay_or_scatter(p)\n            # If decay produced daughters, assign new IDs and add to frontier\n            if len(out) > 1:\n                for d in out[1:]:\n                    new_ps.append((next_id, d))\n                    next_id += 1\n        frontier.extend(new_ps)\n\n    # Pack into track-wise arrays\n    # Map track_id -> sequence of positions and intensities\n    by_id = {}\n    by_id_I = {}\n    for (track_id, p) in [(i,p) for i,p in [(i,parts[i]) for i in range(len(parts))]]:\n        by_id[track_id] = []\n        by_id_I[track_id] = []\n    for k, pos in enumerate(tracks):\n        tid = intens[k][0]\n        I = intens[k][1]\n        by_id.setdefault(tid, [])\n        by_id_I.setdefault(tid, [])\n        by_id[tid].append(pos)\n        by_id_I[tid].append(I)\n\n    # Standardize lengths\n    ids = sorted(by_id.keys())\n    L = max(len(by_id[i]) for i in ids) if ids else 0\n    X = np.full((len(ids), L), np.nan)\n    Y = np.full((len(ids), L), np.nan)\n    Z = np.full((len(ids), L), np.nan)\n    Iarr = np.full((len(ids), L), np.nan)\n    for r, i in enumerate(ids):\n        arr = np.array(by_id[i]) if len(by_id[i]) else np.zeros((0,3))\n        iarr = np.array(by_id_I[i]) if len(by_id_I[i]) else np.zeros((0,))\n        if arr.shape[0] > 0:\n            n = arr.shape[0]\n            X[r,:n], Y[r,:n], Z[r,:n] = arr[:,0], arr[:,1], arr[:,2]\n            Iarr[r,:n] = iarr\n    return X, Y, Z, Iarr, [list(range(len(ids)))]  # families placeholder\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T16:17:54.305858Z","iopub.execute_input":"2025-09-23T16:17:54.306122Z","iopub.status.idle":"2025-09-23T16:17:54.339937Z","shell.execute_reply.started":"2025-09-23T16:17:54.306102Z","shell.execute_reply":"2025-09-23T16:17:54.338998Z"}},"outputs":[],"execution_count":2},{"id":"213a185c","cell_type":"code","source":"def render_2d_xy(X, Y, Iarr, limit=3.0, title=\"XY Projection (Cloud Chamber View)\"):\n    plt.figure(figsize=(6,6))\n    for r in range(X.shape[0]):\n        x = X[r, :]; y = Y[r, :]\n        mask = ~np.isnan(x) & ~np.isnan(y)\n        plt.plot(x[mask], y[mask], linewidth=0.8)\n    plt.gca().set_aspect('equal', 'box')\n    plt.xlim(-limit, limit); plt.ylim(-limit, limit)\n    plt.xlabel(\"x\"); plt.ylabel(\"y\")\n    plt.title(title)\n    plt.show()\n\ndef render_3d_tracks(X, Y, Z, limit=3.0, title=\"3D Helical Tracks\"):\n    fig = plt.figure(figsize=(7,6))\n    ax = fig.add_subplot(111, projection='3d')\n    for r in range(X.shape[0]):\n        x = X[r,:]; y = Y[r,:]; z = Z[r,:]\n        m = ~np.isnan(x) & ~np.isnan(y) & ~np.isnan(z)\n        ax.plot(x[m], y[m], z[m], linewidth=0.8)\n    ax.set_xlim(-limit, limit); ax.set_ylim(-limit, limit); ax.set_zlim(-limit, limit)\n    ax.set_xlabel(\"x\"); ax.set_ylabel(\"y\"); ax.set_zlabel(\"z\")\n    ax.set_title(title)\n    plt.show()\n\ndef hyperspectral_cube(X, Y, Iarr, box=3.0, grid=140, n_lambda=12):\n    \"\"\"\n    Rasterize tracks into a 3D volume in (x,y) with accumulated intensity per wavelength index.\n    We create a Gaussian spectral line per particle with a random shift.\n    Returns cube with shape (n_lambda, H, W).\n    \"\"\"\n    H = W = grid\n    xs = np.linspace(-box, box, W)\n    ys = np.linspace(-box, box, H)\n    cube = np.zeros((n_lambda, H, W), dtype=float)\n\n    # Random spectrum shifts per track row\n    shifts = np.random.uniform(-2.5, 2.5, size=X.shape[0])\n    widths = np.random.uniform(0.6, 1.3, size=X.shape[0])\n\n    for r in range(X.shape[0]):\n        x = X[r,:]; y = Y[r,:]; I = Iarr[r,:]\n        m = ~np.isnan(x) & ~np.isnan(y) & ~np.isnan(I)\n        if not np.any(m):\n            continue\n        # Convert to pixel indices\n        ix = np.clip(((x[m] - xs[0])/(xs[-1]-xs[0]) * (W-1)).astype(int), 0, W-1)\n        iy = np.clip(((y[m] - ys[0])/(ys[-1]-ys[0]) * (H-1)).astype(int), 0, H-1)\n        base = I[m]\n        shift = shifts[r]; width = widths[r]\n        for li in range(n_lambda):\n            # simple Gaussian line profile vs wavelength index\n            spec = np.exp(-0.5*((li + shift)/max(width,1e-3))**2)\n            # deposit\n            for k in range(ix.size):\n                cube[li, iy[k], ix[k]] += base[k] * spec\n    return cube\n\ndef show_hyperspectral_slice(cube, lam_index=0):\n    plt.figure(figsize=(6,5))\n    lam_index = int(np.clip(lam_index, 0, cube.shape[0]-1))\n    plt.imshow(cube[lam_index], origin='lower', interpolation='nearest')\n    plt.title(f\"Hyperspectral Slice λ-index={lam_index}\")\n    plt.xlabel(\"x pixel\"); plt.ylabel(\"y pixel\")\n    plt.colorbar()\n    plt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T16:17:54.340983Z","iopub.execute_input":"2025-09-23T16:17:54.341505Z","iopub.status.idle":"2025-09-23T16:17:54.370002Z","shell.execute_reply.started":"2025-09-23T16:17:54.341477Z","shell.execute_reply":"2025-09-23T16:17:54.368989Z"}},"outputs":[],"execution_count":3},{"id":"a8625300","cell_type":"markdown","source":"\n## 2) Interact: Build Your Own Cloud Chamber\n\nUse these controls to change the magnetic field, number of secondaries, and more. Then explore:\n- **XY** projection (classic cloud-chamber view)\n- **3D tracks**\n- **Hyperspectral** slice viewer \\(I(x,y,\\lambda)\\)\n","metadata":{}},{"id":"7a97aacf","cell_type":"code","source":"def run_event(n_primaries=2, secondaries=80, Bz=0.6, p0=3.5, spread=0.6, dt=0.03, steps=320,\n              loss_coeff=0.02, box=3.0, grid=140, n_lambda=12, lam_index=0,\n              show_xy=True, show_3d=True, show_hyper=True, seed=7):\n    np.random.seed(int(seed))\n    parts = generate_event_cloud(n_primaries=n_primaries, secondaries=int(secondaries), Bz=Bz, p0=p0, spread=spread)\n    X, Y, Z, Iarr, families = simulate(parts, Bz=Bz, dt=dt, steps=int(steps), loss_coeff=loss_coeff)\n    if show_xy:\n        render_2d_xy(X, Y, Iarr, limit=box, title=\"XY Projection (Before/During/After)\")\n    if show_3d:\n        render_3d_tracks(X, Y, Z, limit=box, title=\"3D Tracks\")\n    if show_hyper:\n        cube = hyperspectral_cube(X, Y, Iarr, box=box, grid=int(grid), n_lambda=int(n_lambda))\n        show_hyperspectral_slice(cube, lam_index=int(lam_index))\n\nif WIDGETS:\n    ui = VBox([\n        HBox([\n            FloatSlider(description=\"Bz\", min=0.0, max=1.5, step=0.05, value=0.6),\n            IntSlider(description=\"secondaries\", min=20, max=240, step=10, value=100),\n            FloatSlider(description=\"p0\", min=1.0, max=8.0, step=0.1, value=3.5),\n            FloatSlider(description=\"spread\", min=0.1, max=1.0, step=0.05, value=0.6),\n        ]),\n        HBox([\n            IntSlider(description=\"steps\", min=120, max=600, step=20, value=360),\n            FloatSlider(description=\"dt\", min=0.01, max=0.08, step=0.005, value=0.03),\n            FloatSlider(description=\"loss\", min=0.0, max=0.06, step=0.002, value=0.02),\n            IntSlider(description=\"seed\", min=0, max=9999, step=1, value=7),\n        ]),\n        HBox([\n            FloatSlider(description=\"box\", min=2.0, max=5.0, step=0.1, value=3.0),\n            IntSlider(description=\"grid\", min=64, max=240, step=8, value=140),\n            IntSlider(description=\"nλ\", min=6, max=24, step=1, value=12),\n            IntSlider(description=\"λ index\", min=0, max=23, step=1, value=0),\n        ]),\n        HBox([\n            Checkbox(description=\"show XY\", value=True),\n            Checkbox(description=\"show 3D\", value=True),\n            Checkbox(description=\"show hyper\", value=True),\n        ])\n    ])\n\n    out = interactive_output(run_event, {\n        \"Bz\": ui.children[0].children[0],\n        \"secondaries\": ui.children[0].children[1],\n        \"p0\": ui.children[0].children[2],\n        \"spread\": ui.children[0].children[3],\n        \"steps\": ui.children[1].children[0],\n        \"dt\": ui.children[1].children[1],\n        \"loss_coeff\": ui.children[1].children[2],\n        \"seed\": ui.children[1].children[3],\n        \"box\": ui.children[2].children[0],\n        \"grid\": ui.children[2].children[1],\n        \"n_lambda\": ui.children[2].children[2],\n        \"lam_index\": ui.children[2].children[3],\n        \"show_xy\": ui.children[3].children[0],\n        \"show_3d\": ui.children[3].children[1],\n        \"show_hyper\": ui.children[3].children[2],\n    })\n\n    display(ui, out)\nelse:\n    print(\"Widgets not available — call run_event(...) directly.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T16:17:54.371127Z","iopub.execute_input":"2025-09-23T16:17:54.371444Z","iopub.status.idle":"2025-09-23T16:17:57.127686Z","shell.execute_reply.started":"2025-09-23T16:17:54.371416Z","shell.execute_reply":"2025-09-23T16:17:57.126861Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"VBox(children=(HBox(children=(FloatSlider(value=0.6, description='Bz', max=1.5, step=0.05), IntSlider(value=10…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5f7e7a9de0824d61a64b05edcc2ff913"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Output()","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ea3be2b7c5de49d6a0787bbd66fecb3b"}},"metadata":{}}],"execution_count":4},{"id":"2eae645c","cell_type":"markdown","source":"\n## 3) Before / During / After Time Slices\n\nUse a simple time index to see the event evolve. This renders **XY** projection at a chosen time step.\n","metadata":{}},{"id":"c83e3484","cell_type":"code","source":"def run_time_slices(step_index=120, Bz=0.6, secondaries=100, steps=360, dt=0.03, seed=11):\n    np.random.seed(int(seed))\n    parts = generate_event_cloud(n_primaries=2, secondaries=int(secondaries), Bz=Bz, p0=3.5, spread=0.6)\n    # Run once, but we will re-render up to step_index only\n    X, Y, Z, Iarr, fam = simulate(parts, Bz=Bz, dt=dt, steps=int(steps), loss_coeff=0.02)\n    # Mask future steps by injecting NaNs after step_index\n    Xs = X.copy(); Ys = Y.copy()\n    for r in range(X.shape[0]):\n        x = Xs[r,:]; y = Ys[r,:]\n        if step_index < x.shape[0]:\n            x[step_index:] = np.nan\n            y[step_index:] = np.nan\n            Xs[r,:] = x; Ys[r,:] = y\n    render_2d_xy(Xs, Ys, Iarr, limit=3.0, title=f\"XY at time index {step_index}\")\n\nif WIDGETS:\n    _ = interact(run_time_slices,\n                 step_index=IntSlider(description=\"time idx\", min=0, max=500, step=10, value=120),\n                 Bz=FloatSlider(description=\"Bz\", min=0.0, max=1.5, step=0.05, value=0.6),\n                 secondaries=IntSlider(description=\"secondaries\", min=20, max=240, step=10, value=100),\n                 steps=IntSlider(description=\"steps\", min=120, max=600, step=20, value=360),\n                 dt=FloatSlider(description=\"dt\", min=0.01, max=0.08, step=0.005, value=0.03),\n                 seed=IntSlider(description=\"seed\", min=0, max=9999, step=1, value=11))\nelse:\n    print(\"Widgets not available — call run_time_slices(...) directly.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T16:17:57.128568Z","iopub.execute_input":"2025-09-23T16:17:57.12884Z","iopub.status.idle":"2025-09-23T16:17:58.442367Z","shell.execute_reply.started":"2025-09-23T16:17:57.12882Z","shell.execute_reply":"2025-09-23T16:17:58.441426Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"interactive(children=(IntSlider(value=120, description='time idx', max=500, step=10), FloatSlider(value=0.6, d…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b46e73d8034a4c70807dcdda3e22f0ac"}},"metadata":{}}],"execution_count":5},{"id":"7ff002bf","cell_type":"markdown","source":"\n## 4) Export Utilities\n\nUse `export_xy_gif(...)` to render an animated XY projection as a GIF (requires Pillow).\n","metadata":{}},{"id":"97fadc32","cell_type":"code","source":"from matplotlib import animation\n\ndef export_xy_gif(outfile=\"cloud_xy.gif\", Bz=0.6, secondaries=120, steps=240, dt=0.03, box=3.0, seed=21, fps=12):\n    np.random.seed(int(seed))\n    parts = generate_event_cloud(n_primaries=2, secondaries=int(secondaries), Bz=Bz, p0=3.5, spread=0.6)\n    X, Y, Z, Iarr, fam = simulate(parts, Bz=Bz, dt=dt, steps=int(steps), loss_coeff=0.02)\n\n    fig = plt.figure(figsize=(6,6))\n    ax = plt.gca()\n    ax.set_aspect('equal', 'box')\n    ax.set_xlim(-box, box); ax.set_ylim(-box, box)\n    ax.set_xlabel(\"x\"); ax.set_ylabel(\"y\")\n    ax.set_title(\"Cloud Chamber XY (animated)\")\n\n    lines = []\n    for r in range(X.shape[0]):\n        line, = ax.plot([], [])\n        lines.append(line)\n\n    def init():\n        for ln in lines:\n            ln.set_data([], [])\n        return lines\n\n    def update(frame):\n        for r, ln in enumerate(lines):\n            x = X[r,:]; y = Y[r,:]\n            m = ~np.isnan(x) & ~np.isnan(y)\n            idx = np.where(m)[0]\n            if idx.size == 0:\n                ln.set_data([], [])\n            else:\n                upto = idx.min() + min(frame, idx.size-1)\n                ln.set_data(x[:upto], y[:upto])\n        return lines\n\n    ani = animation.FuncAnimation(fig, update, frames=steps, init_func=init, blit=False, interval=80)\n    try:\n        ani.save(outfile, writer='pillow', fps=fps)\n        print(f\"Saved: {outfile}\")\n    except Exception as ex:\n        print(\"Could not save GIF:\", ex)\n\n# Example (commented):\n# export_xy_gif(outfile=\"cloud_xy.gif\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T16:17:58.443276Z","iopub.execute_input":"2025-09-23T16:17:58.443522Z","iopub.status.idle":"2025-09-23T16:17:58.46938Z","shell.execute_reply.started":"2025-09-23T16:17:58.443502Z","shell.execute_reply":"2025-09-23T16:17:58.468158Z"}},"outputs":[],"execution_count":6},{"id":"fa851141","cell_type":"markdown","source":"\n## 5) Study Prompts & Extensions\n\n- Introduce a **magnetic field gradient** or add a **transverse E-field** for E×B drifts.\n- Assign realistic **lifetimes** to species and draw exponential decay lengths.\n- Add **multiple materials** with different absorption/ionization parameters.\n- Build a small **reconstruction**: fit circle in XY to estimate \\(p_T\\) and infer charge sign.\n- Extend the hyperspectral cube to full \\(I(x, y, z, \\lambda)\\) with slicing controls.\n","metadata":{}}]}