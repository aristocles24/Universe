{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":5,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/lhc-simulator?scriptVersionId=263585011\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"id":"b6852896","cell_type":"markdown","source":"\n# LHC Event Lab — Toy Collider Simulator & Event Display\n\nThink CERN, but pocket-sized. This notebook is a **hands-on lab** for collider-style\nevents: a simple **2→2 hard scatter** with jets, **underlying event**, a toy **detector**\n(tracker + calorimeters), **magnetic bending** of charged tracks, and **interactive**\ncontrols to set your own initial conditions.\n\n**This is a teaching tool.** It aims for intuition, not accuracy. You can:\n- Generate events at a chosen √s (units-free).\n- Tune **jetiness** (how tightly particles cluster into jets).\n- Add **pileup** (overlapping minimum-bias events).\n- View a **3D event display**, **XY tracker view**, and **η–φ calorimeter heatmap**.\n- Explore **kinematics** (pT, η) and export quick GIFs.\n","metadata":{}},{"id":"e113f809","cell_type":"markdown","source":"\n## 0) Setup\nRun this cell to import packages and check for widgets. The notebook works with or without widgets.\n","metadata":{}},{"id":"0fb662e1","cell_type":"code","source":"import math\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ntry:\n    from ipywidgets import interact, interactive_output, FloatSlider, IntSlider, Checkbox, VBox, HBox, Dropdown\n    WIDGETS=True\nexcept Exception:\n    WIDGETS=False\n\nfrom mpl_toolkits.mplot3d import Axes3D  # noqa: F401\n\nnp.random.seed(1234)\nprint(\"Widgets available:\", WIDGETS)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T16:22:15.054477Z","iopub.execute_input":"2025-09-23T16:22:15.054701Z","iopub.status.idle":"2025-09-23T16:22:15.230622Z","shell.execute_reply.started":"2025-09-23T16:22:15.05468Z","shell.execute_reply":"2025-09-23T16:22:15.229711Z"}},"outputs":[{"name":"stdout","text":"Widgets available: True\n","output_type":"stream"}],"execution_count":1},{"id":"33cb1432","cell_type":"markdown","source":"\n## 1) Mini‑Primer: From scatter to display\n\n- **Hard scatter (2→2):** At high energies, a common topology is two jets, approximately back‑to‑back in φ.\n- **Jets:** Sprays of hadrons clustered around an axis. Here we mimic jets by drawing particle directions from a cone about two axes.\n- **Underlying event & pileup:** Extra soft particles everywhere; pileup adds many minimum‑bias events on top.\n- **Detector:** \n  - **Tracker** records charged tracks; a magnetic field \\(B_z\\) bends them into curves with radius \\(r \\approx p_T/(|q|B)\\).\n  - **Calorimeter** deposits energy in η–φ towers. We accumulate an energy heatmap over bins.\n- **Kinematics:** \\(p_T\\) (transverse momentum) and **pseudorapidity** \\( \\eta = -\\ln\\tan(\\theta/2) \\).\n\nNone of this aspires to realism; it’s a sandbox to see how shapes/angles/curvatures behave.\n","metadata":{}},{"id":"85fd990b","cell_type":"code","source":"# ---------- Utilities ----------\ndef sph_to_cart(theta, phi):\n    st, ct = np.sin(theta), np.cos(theta)\n    sp, cp = np.sin(phi), np.cos(phi)\n    return np.array([st*cp, st*sp, ct])\n\ndef eta_from_theta(theta):\n    return -np.log(np.tan(theta/2.0) + 1e-12)\n\ndef theta_from_eta(eta):\n    return 2*np.arctan(np.exp(-eta))\n\ndef isotropic_dir(n=1):\n    u = np.random.uniform(-1, 1, size=n)\n    phi = np.random.uniform(0, 2*np.pi, size=n)\n    theta = np.arccos(u)\n    if n==1:\n        return float(theta), float(phi)\n    return theta, phi\n\n# ---------- Toy hard-scatter + jets ----------\ndef generate_event(sqrts=13000.0, # units-free scale\n                   n_jet_particles=60, jet_spread=0.25, jet_eta=0.2,\n                   ue_particles=40, pileup=0,\n                   pt_scale=1.0):\n    \"\"\"\n    Return arrays for N particles with (px,py,pz,E,q,eta,phi).\n    Two jets back-to-back in phi; particles distributed around each jet axis.\n    Underlying event (UE) adds isotropic soft particles. Pileup adds more UE.\n    \"\"\"\n    parts = []\n\n    # Jet axes (back-to-back in phi, with small eta)\n    phi0 = np.random.uniform(0, 2*np.pi)\n    phi1 = (phi0 + np.pi) % (2*np.pi)\n    th0 = theta_from_eta(jet_eta)\n    th1 = theta_from_eta(-jet_eta)\n\n    # Sample jet particles around each axis\n    def sample_around_axis(theta_axis, phi_axis, count):\n        # small-cone around axis: random rotations of axis by ~jet_spread\n        out = []\n        for _ in range(count):\n            # pick small angular deviation\n            dtheta = np.abs(np.random.normal(0.0, jet_spread))\n            dphi   = np.random.uniform(0, 2*np.pi)\n            # rotate axis by dtheta around a random azimuth\n            # Build local frame from axis\n            ax = sph_to_cart(theta_axis, phi_axis)\n            # any vector not parallel:\n            k = np.array([0.0,0.0,1.0]) if abs(ax[2])<0.9 else np.array([1.0,0.0,0.0])\n            v1 = np.cross(ax, k); v1 /= (np.linalg.norm(v1)+1e-12)\n            v2 = np.cross(ax, v1)\n            # small tilt\n            dir_vec = (np.cos(dtheta)*ax + np.sin(dtheta)*(np.cos(dphi)*v1 + np.sin(dphi)*v2))\n            dir_vec /= (np.linalg.norm(dir_vec)+1e-12)\n            out.append(dir_vec)\n        return np.array(out)\n\n    N = n_jet_particles\n    dirs0 = sample_around_axis(th0, phi0, N//2)\n    dirs1 = sample_around_axis(th1, phi1, N - N//2)\n\n    # UE and pileup\n    total_ue = ue_particles + int(pileup)*ue_particles\n    theta_ue, phi_ue = isotropic_dir(total_ue)\n    ue_dirs = np.stack([np.sin(theta_ue)*np.cos(phi_ue),\n                        np.sin(theta_ue)*np.sin(phi_ue),\n                        np.cos(theta_ue)], axis=-1)\n\n    dirs = np.concatenate([dirs0, dirs1, ue_dirs], axis=0)\n\n    # pT spectrum: soft exponential + harder tail for jet cores\n    n = dirs.shape[0]\n    pt_soft = np.random.exponential(scale=0.5*pt_scale, size=n)\n    pt_hard = np.random.gamma(shape=2.0, scale=pt_scale, size=n)  # gives some punch\n    mix = np.random.rand(n) < 0.35\n    pT = np.where(mix, pt_hard, pt_soft) + 0.05\n\n    # masses (toy) and charges\n    m = np.random.choice([0.14, 0.5, 0.94], size=n, p=[0.7, 0.2, 0.1])\n    q = np.random.choice([-1, 1], size=n, p=[0.52, 0.48])\n\n    # build momenta with pT and direction\n    # given direction (unit), get theta,phi\n    theta = np.arccos(np.clip(dirs[:,2], -1, 1))\n    phi = (np.arctan2(dirs[:,1], dirs[:,0]) + 2*np.pi)%(2*np.pi)\n    # p = pT / sin(theta)\n    sinth = np.sin(theta) + 1e-12\n    p = pT / sinth\n    px = p * dirs[:,0]; py = p * dirs[:,1]; pz = p * dirs[:,2]\n    E  = np.sqrt(p**2 + m**2)\n\n    return px, py, pz, E, q, theta, phi, m\n\n# ---------- Magnetic field helix (tracker) ----------\ndef helix_xy(px, py, q, Bz=3.8, steps=300, step_len=0.02):\n    \"\"\"\n    Create XY polylines for each charged particle in a uniform Bz field.\n    r = pT/(|q|B). We evolve azimuth along path; no energy loss here to keep it simple.\n    Returns arrays list: [(x[], y[]), ...]\n    \"\"\"\n    pts = []\n    for i in range(px.size):\n        pT = math.hypot(px[i], py[i])\n        if pT < 1e-6 or q[i]==0 or Bz==0.0:\n            # straight line\n            x = np.linspace(0, step_len*steps*(px[i]/(pT+1e-12)), steps)\n            y = np.linspace(0, step_len*steps*(py[i]/(pT+1e-12)), steps)\n            pts.append((x,y)); continue\n        r = pT/(abs(q[i])*abs(Bz)+1e-12)\n        # sign determines handedness: dphi/ds ∝ q*B/r\n        omega = (q[i]*Bz)/(r+1e-12)\n        s = np.arange(steps)*step_len\n        phi0 = np.arctan2(py[i], px[i])\n        phi = phi0 + omega*s\n        x = r*np.cos(phi) - r*np.cos(phi0)\n        y = r*np.sin(phi) - r*np.sin(phi0)\n        pts.append((x,y))\n    return pts\n\n# ---------- Calorimeter tower map ----------\ndef calorimeter_map(px, py, pz, E, n_eta=40, n_phi=60, eta_max=3.0):\n    eta = 0.5*np.log((np.sqrt(px**2+py**2+pz**2)+pz+1e-12)/(np.sqrt(px**2+py**2+pz**2)-pz+1e-12))\n    phi = (np.arctan2(py, px)+2*np.pi)%(2*np.pi)\n    eta_edges = np.linspace(-eta_max, eta_max, n_eta+1)\n    phi_edges = np.linspace(0, 2*np.pi, n_phi+1)\n    H, _, _ = np.histogram2d(eta, phi, bins=[eta_edges, phi_edges], weights=E)\n    return H, eta_edges, phi_edges\n\n# ---------- Displays ----------\ndef draw_event_display(px, py, pz, E, q, Bz=3.8, show_xy=True, show_3d=True, show_calo=True,\n                       n_eta=40, n_phi=60, eta_max=3.0):\n    import matplotlib.pyplot as plt\n\n    if show_xy:\n        # tracker view\n        tracks = helix_xy(px, py, q, Bz=Bz, steps=260, step_len=0.02)\n        plt.figure(figsize=(6,6))\n        for (x,y) in tracks:\n            plt.plot(x, y, linewidth=0.7)\n        lim = 4.0\n        th = np.linspace(0, 2*np.pi, 400)\n        # draw simple detector layers\n        for r in [0.6, 1.0, 1.4, 2.0, 2.6, 3.2]:\n            plt.plot(r*np.cos(th), r*np.sin(th), linewidth=0.8)\n        plt.gca().set_aspect('equal', 'box')\n        plt.xlim(-lim, lim); plt.ylim(-lim, lim)\n        plt.xlabel(\"x\"); plt.ylabel(\"y\")\n        plt.title(\"Tracker XY (toy helixes)\")\n        plt.show()\n\n    if show_calo:\n        H, eta_edges, phi_edges = calorimeter_map(px, py, pz, E, n_eta=n_eta, n_phi=n_phi, eta_max=eta_max)\n        plt.figure(figsize=(7,4))\n        plt.imshow(H.T, origin='lower', aspect='auto',\n                   extent=[eta_edges[0], eta_edges[-1], phi_edges[0], phi_edges[-1]])\n        plt.xlabel(\"η\"); plt.ylabel(\"φ [rad]\")\n        plt.title(\"Calorimeter η–φ Energy\")\n        plt.colorbar(label=\"Energy (arb.)\")\n        plt.show()\n\n    if show_3d:\n        fig = plt.figure(figsize=(7,6))\n        ax = fig.add_subplot(111, projection='3d')\n        # straight-line 3D segments from origin for a quick impression\n        for i in range(px.size):\n            p = np.array([px[i], py[i], pz[i]])\n            p = p/(np.linalg.norm(p)+1e-12)\n            s = np.linspace(0, 4.0, 40)\n            X = s*p[0]; Y = s*p[1]; Z = s*p[2]\n            ax.plot(X, Y, Z, linewidth=0.7)\n        ax.set_xlim(-4,4); ax.set_ylim(-4,4); ax.set_zlim(-4,4)\n        ax.set_xlabel(\"x\"); ax.set_ylabel(\"y\"); ax.set_zlabel(\"z\")\n        ax.set_title(\"3D Event Rays (toy)\")\n        plt.show()\n\n# ---------- One-stop function ----------\ndef make_event(sqrts=14000.0, n_jet_particles=80, jet_spread=0.22, jet_eta=0.4,\n               ue_particles=60, pileup=0, pt_scale=1.2,\n               Bz=3.8,\n               show_xy=True, show_3d=True, show_calo=True,\n               seed=1234, n_eta=40, n_phi=60, eta_max=3.0):\n    np.random.seed(int(seed))\n    px,py,pz,E,q,theta,phi,m = generate_event(\n        sqrts=sqrts,\n        n_jet_particles=int(n_jet_particles),\n        jet_spread=float(jet_spread),\n        jet_eta=float(jet_eta),\n        ue_particles=int(ue_particles),\n        pileup=int(pileup),\n        pt_scale=float(pt_scale)\n    )\n    draw_event_display(px,py,pz,E,q,Bz=float(Bz),\n                       show_xy=show_xy, show_3d=show_3d, show_calo=show_calo,\n                       n_eta=int(n_eta), n_phi=int(n_phi), eta_max=float(eta_max))\n\n    # Kinematics: pT and η\n    pT = np.sqrt(px**2 + py**2)\n    eta = 0.5*np.log((np.sqrt(px**2+py**2+pz**2)+pz+1e-12)/(np.sqrt(px**2+py**2+pz**2)-pz+1e-12))\n    plt.figure(figsize=(6,3.5))\n    plt.hist(pT, bins=40)\n    plt.xlabel(\"pT (arb.)\"); plt.ylabel(\"Count\"); plt.title(\"pT Spectrum\")\n    plt.show()\n\n    plt.figure(figsize=(6,3.5))\n    plt.hist(eta, bins=40)\n    plt.xlabel(\"η\"); plt.ylabel(\"Count\"); plt.title(\"η Distribution\")\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T16:22:15.232163Z","iopub.execute_input":"2025-09-23T16:22:15.232422Z","iopub.status.idle":"2025-09-23T16:22:15.267918Z","shell.execute_reply.started":"2025-09-23T16:22:15.232402Z","shell.execute_reply":"2025-09-23T16:22:15.267047Z"}},"outputs":[],"execution_count":2},{"id":"63518f95","cell_type":"markdown","source":"\n## 2) Interactive Controls\n\nTune **√s, jet spread, jet multiplicity, underlying event, pileup, magnetic field**, and more.\n","metadata":{}},{"id":"b5085de8","cell_type":"code","source":"if WIDGETS:\n    ui = VBox([\n        HBox([\n            FloatSlider(description=\"√s\", min=1000.0, max=20000.0, step=500.0, value=14000.0),\n            IntSlider(description=\"jet N\", min=20, max=240, step=10, value=100),\n            FloatSlider(description=\"jet spread\", min=0.05, max=0.6, step=0.01, value=0.22),\n            FloatSlider(description=\"jet η\", min=-2.0, max=2.0, step=0.05, value=0.4),\n        ]),\n        HBox([\n            IntSlider(description=\"UE N\", min=0, max=200, step=10, value=60),\n            IntSlider(description=\"pileup\", min=0, max=6, step=1, value=0),\n            FloatSlider(description=\"pT scale\", min=0.3, max=2.5, step=0.1, value=1.2),\n            FloatSlider(description=\"Bz\", min=0.0, max=5.0, step=0.1, value=3.8),\n        ]),\n        HBox([\n            IntSlider(description=\"η bins\", min=20, max=80, step=2, value=40),\n            IntSlider(description=\"φ bins\", min=24, max=120, step=6, value=60),\n            FloatSlider(description=\"η max\", min=1.5, max=4.0, step=0.1, value=3.0),\n            IntSlider(description=\"seed\", min=0, max=9999, step=1, value=1234),\n        ]),\n        HBox([\n            Checkbox(description=\"show XY\", value=True),\n            Checkbox(description=\"show 3D\", value=True),\n            Checkbox(description=\"show calo\", value=True),\n        ])\n    ])\n    out = interactive_output(\n        make_event,\n        {\n            \"sqrts\": ui.children[0].children[0],\n            \"n_jet_particles\": ui.children[0].children[1],\n            \"jet_spread\": ui.children[0].children[2],\n            \"jet_eta\": ui.children[0].children[3],\n            \"ue_particles\": ui.children[1].children[0],\n            \"pileup\": ui.children[1].children[1],\n            \"pt_scale\": ui.children[1].children[2],\n            \"Bz\": ui.children[1].children[3],\n            \"n_eta\": ui.children[2].children[0],\n            \"n_phi\": ui.children[2].children[1],\n            \"eta_max\": ui.children[2].children[2],\n            \"seed\": ui.children[2].children[3],\n            \"show_xy\": ui.children[3].children[0],\n            \"show_3d\": ui.children[3].children[1],\n            \"show_calo\": ui.children[3].children[2],\n        }\n    )\n    display(ui, out)\nelse:\n    print(\"Widgets not available — call make_event(...) directly.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T16:22:15.268865Z","iopub.execute_input":"2025-09-23T16:22:15.269135Z","iopub.status.idle":"2025-09-23T16:22:16.996426Z","shell.execute_reply.started":"2025-09-23T16:22:15.269114Z","shell.execute_reply":"2025-09-23T16:22:16.995523Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"VBox(children=(HBox(children=(FloatSlider(value=14000.0, description='√s', max=20000.0, min=1000.0, step=500.0…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"18a9f3778202492a8c6969ac9e5c0829"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Output()","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b3f5f4febaa9460a9440d62b58a16513"}},"metadata":{}}],"execution_count":3},{"id":"aa604a49","cell_type":"markdown","source":"\n## 3) Export an animated XY event (GIF)\n\nUse `export_xy_gif(...)` to save a quick tracker-view animation (requires Pillow).\n","metadata":{}},{"id":"2e743789","cell_type":"code","source":"from matplotlib import animation\n\ndef export_xy_gif(outfile=\"lhc_event.gif\",\n                  frames=40,\n                  sqrts=14000.0, n_jet_particles=100, jet_spread=0.22, jet_eta=0.4,\n                  ue_particles=60, pileup=0, pt_scale=1.2, Bz=3.8,\n                  seed=1234):\n    np.random.seed(int(seed))\n    px,py,pz,E,q,theta,phi,m = generate_event(\n        sqrts=sqrts,\n        n_jet_particles=int(n_jet_particles),\n        jet_spread=float(jet_spread),\n        jet_eta=float(jet_eta),\n        ue_particles=int(ue_particles),\n        pileup=int(pileup),\n        pt_scale=float(pt_scale)\n    )\n    tracks = helix_xy(px, py, q, Bz=Bz, steps=260, step_len=0.02)\n    fig = plt.figure(figsize=(6,6))\n    ax = plt.gca()\n    lim=4.0\n    ax.set_xlim(-lim, lim); ax.set_ylim(-lim, lim); ax.set_aspect('equal', 'box')\n    th = np.linspace(0, 2*np.pi, 400)\n    layers = [0.6,1.0,1.4,2.0,2.6,3.2]\n    for r in layers:\n        ax.plot(r*np.cos(th), r*np.sin(th), linewidth=0.8)\n    lines = [ax.plot([],[])[0] for _ in tracks]\n\n    def init():\n        for ln in lines: ln.set_data([],[])\n        return lines\n\n    def update(f):\n        cut = int(np.linspace(5, len(tracks[0][0])-1, frames)[f])\n        for ln, (x,y) in zip(lines, tracks):\n            ln.set_data(x[:cut], y[:cut])\n        return lines\n\n    ani = animation.FuncAnimation(fig, update, frames=frames, init_func=init, blit=False, interval=120)\n    try:\n        ani.save(outfile, writer='pillow', fps=12)\n        print(f\"Saved: {outfile}\")\n    except Exception as ex:\n        print(\"Could not save GIF:\", ex)\n\n# Example (commented):\n# export_xy_gif(outfile=\"lhc_event.gif\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T16:22:16.997356Z","iopub.execute_input":"2025-09-23T16:22:16.997688Z","iopub.status.idle":"2025-09-23T16:22:17.024519Z","shell.execute_reply.started":"2025-09-23T16:22:16.997656Z","shell.execute_reply":"2025-09-23T16:22:17.023494Z"}},"outputs":[],"execution_count":4},{"id":"ff624d23","cell_type":"markdown","source":"\n## 4) Study Prompts & Extensions\n\n- Fit **circles in XY** to estimate \\(p_T\\) and infer the charge sign from curvature.\n- Add **energy loss** to tracks so low-\\(p_T\\) curl up and terminate.\n- Build **jet finding** (e.g., cone or k‑means on η–φ) and draw jet axes.\n- Stack **time slices** to show evolution during the bunch crossing.\n- Compare your toy distributions to public plots from ATLAS/CMS for qualitative trends.\n","metadata":{}},{"id":"e201c9c2-3e87-4770-8182-fc131f11ecf4","cell_type":"code","source":"# en fin","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}