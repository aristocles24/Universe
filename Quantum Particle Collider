{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dascient/quantum-particle-collider?scriptVersionId=263593676\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"\n# Quantum/Subatomic Collision Simulator — Interactive 3D/4D Event Lab\n\nAn educational sandbox for subatomic dynamics and event displays:\n- Relativistic **Boris pusher** (uniform E & B).\n- Toy **collision generator** (decays, scatters, absorption).\n- Interactive **3D views** (Plotly if available; matplotlib fallback).\n- **Hyperspectral** I(x,y,λ)I(x,y,λ) slice viewer and **η–φ** calorimeter map.\n- Export: **HTML** (Plotly), **GIF** (matplotlib), **JSON** event snapshots.\n","metadata":{}},{"cell_type":"markdown","source":"\n## 0) Setup\nThe notebook uses `numpy`, `matplotlib`, and (optionally) `ipywidgets` + `plotly` when present.\n","metadata":{}},{"cell_type":"code","source":"import math, json\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom dataclasses import dataclass\nfrom typing import List, Tuple\ntry:\n    from ipywidgets import interact, interactive_output, FloatSlider, IntSlider, Checkbox, VBox, HBox\n    IW = True\nexcept Exception:\n    IW = False\ntry:\n    import plotly.graph_objects as go\n    PLOTLY = True\nexcept Exception:\n    PLOTLY = False\n\nfrom mpl_toolkits.mplot3d import Axes3D  # noqa: F401\n\nimport plotly.io as pio\nfrom IPython.display import display\n\n# Use a renderer that works reliably in Kaggle notebooks\n# (both of these are safe; Kaggle usually likes 'notebook_connected')\npio.renderers.default = \"notebook_connected\"  # fallback: \"notebook\"\n\nnp.random.seed(10)\nprint(\"Widgets:\", IW, \"| Plotly:\", PLOTLY)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T17:23:49.547921Z","iopub.execute_input":"2025-09-23T17:23:49.548931Z","iopub.status.idle":"2025-09-23T17:23:49.555903Z","shell.execute_reply.started":"2025-09-23T17:23:49.548882Z","shell.execute_reply":"2025-09-23T17:23:49.555116Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"\n## 1) Motion Integrator (Boris, relativistic)\n","metadata":{}},{"cell_type":"code","source":"@dataclass\nclass Particle:\n    x: np.ndarray\n    p: np.ndarray\n    q: float\n    m: float\n    alive: bool = True\n    species: str = \"π±\"\n    decay_prob: float = 0.0008\n    scatter_prob: float = 0.0006\n    absorb_E_min: float = 0.25\n\ndef boris_push(p: Particle, E: np.ndarray, B: np.ndarray, dt: float):\n    if not p.alive: return\n    p_mag = float(np.linalg.norm(p.p) + 1e-12)\n    gamma = math.sqrt(1.0 + (p_mag/p.m)**2)\n    # half E\n    t = (p.q * E) * (0.5*dt)\n    p_minus = p.p + t\n    # rotate in B\n    t_vec = (p.q * B / p.m) * (0.5*dt)\n    t2 = float(np.dot(t_vec, t_vec))\n    s_vec = 2.0 * t_vec / (1.0 + t2)\n    p_prime = p_minus + np.cross(p_minus, t_vec)\n    p_plus  = p_minus + np.cross(p_prime, s_vec)\n    # half E\n    p.p = p_plus + t\n    # position update\n    p_mag = float(np.linalg.norm(p.p) + 1e-12)\n    gamma = math.sqrt(1.0 + (p_mag/p.m)**2)\n    v = p.p / (gamma * p.m)\n    p.x = p.x + dt * v\n    # absorb if KE too small\n    KE = gamma*p.m - p.m\n    if KE < p.absorb_E_min:\n        p.alive = False\n\ndef random_scatter(p: Particle, sigma=0.06):\n    if not p.alive: return\n    if np.random.rand() < p.scatter_prob:\n        axis = np.random.randn(3); axis /= (np.linalg.norm(axis)+1e-12)\n        ang = np.random.normal(0.0, sigma)\n        kx,ky,kz = axis\n        K = np.array([[0,-kz,ky],[kz,0,-kx],[-ky,kx,0]])\n        R = np.eye(3) + np.sin(ang)*K + (1-np.cos(ang))*(K@K)\n        p.p = R @ p.p\n\ndef random_decay(p: Particle):\n    if (not p.alive) or (np.random.rand() >= p.decay_prob): return []\n    p.alive = False\n    mom_mag = float(np.linalg.norm(p.p) + 1e-12)\n    dir0 = p.p / (mom_mag + 1e-12)\n    def tilt(d, spread=0.35):\n        axis = np.random.randn(3); axis /= (np.linalg.norm(axis)+1e-12)\n        ang = abs(np.random.normal(spread, 0.15))\n        kx,ky,kz = axis\n        K = np.array([[0,-kz,ky],[kz,0,-kx],[-ky,kx,0]])\n        R = np.eye(3) + np.sin(ang)*K + (1-np.cos(ang))*(K@K)\n        v = R @ d\n        return v/ (np.linalg.norm(v)+1e-12)\n    frac = float(np.clip(np.random.beta(2,2), 0.2, 0.8))\n    d1, d2 = tilt(dir0), tilt(-dir0)\n    q1 = np.random.choice([-1,1]); q2 = -q1\n    m_child = max(0.2, p.m*0.6 + np.random.rand()*0.2)\n    return [\n        Particle(x=p.x.copy(), p=d1*mom_mag*frac, q=q1, m=m_child, species=\"daughter\"),\n        Particle(x=p.x.copy(), p=d2*mom_mag*(1-frac), q=q2, m=m_child, species=\"daughter\"),\n    ]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T17:23:49.557116Z","iopub.execute_input":"2025-09-23T17:23:49.557359Z","iopub.status.idle":"2025-09-23T17:23:49.583924Z","shell.execute_reply.started":"2025-09-23T17:23:49.55734Z","shell.execute_reply":"2025-09-23T17:23:49.582992Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"\n## 2) Event Generator & Simulation\n","metadata":{}},{"cell_type":"code","source":"def gen_event(n_secondaries=120, p0=3.0, spread=0.6):\n    parts = []\n    # beams\n    parts.append(Particle(x=np.array([0,0,-2.0]), p=np.array([0,0,+p0]), q=+1, m=0.8, species=\"beam+\"))\n    parts.append(Particle(x=np.array([0,0,+2.0]), p=np.array([0,0,-p0]), q=-1, m=0.8, species=\"beam-\"))\n    # secondaries\n    for _ in range(int(n_secondaries)):\n        u = np.random.uniform(-1,1)\n        phi = np.random.uniform(0, 2*np.pi)\n        th = np.arccos(u)\n        d = np.array([np.sin(th)*np.cos(phi), np.sin(th)*np.sin(phi), np.cos(th)])\n        pt = abs(np.random.normal(p0*0.6, p0*spread))\n        q = np.random.choice([-1,1])\n        m = np.random.uniform(0.2, 1.0)\n        parts.append(Particle(x=np.zeros(3), p=d*pt, q=q, m=m, species=\"sec\"))\n    return parts\n\ndef simulate(parts, E=np.array([0,0,0.0]), B=np.array([0,0,0.6]), dt=0.03, steps=360, loss_coeff=0.015):\n    traj = {}; ion = {}\n    frontier = [(i,p) for i,p in enumerate(parts)]\n    next_id = len(frontier)\n    for _ in range(int(steps)):\n        new_ps = []\n        for tid, p in list(frontier):\n            if not p.alive: continue\n            traj.setdefault(tid, []).append(p.x.copy())\n            pm = float(np.linalg.norm(p.p) + 1e-12)\n            gamma = math.sqrt(1.0 + (pm/p.m)**2)\n            beta  = math.sqrt(max(0.0, 1.0 - 1.0/(gamma**2)))\n            ion.setdefault(tid, []).append(min(4.0, 1.0/(beta+0.05)))\n            p.p *= (1.0 - loss_coeff*dt)\n            boris_push(p, E, B, dt)\n            random_scatter(p)\n            for d in random_decay(p):\n                frontier.append((next_id, d)); next_id += 1\n    ids = sorted(traj.keys())\n    L = max(len(traj[i]) for i in ids) if ids else 0\n    X = np.full((len(ids), L), np.nan); Y = np.full_like(X, np.nan); Z = np.full_like(X, np.nan); I = np.full_like(X, np.nan)\n    for r,i in enumerate(ids):\n        arr = np.array(traj[i]); ii = np.array(ion[i])\n        n = arr.shape[0]\n        X[r,:n], Y[r,:n], Z[r,:n] = arr[:,0], arr[:,1], arr[:,2]\n        I[r,:n] = ii\n    return X,Y,Z,I","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T17:23:49.584798Z","iopub.execute_input":"2025-09-23T17:23:49.585145Z","iopub.status.idle":"2025-09-23T17:23:49.606537Z","shell.execute_reply.started":"2025-09-23T17:23:49.585106Z","shell.execute_reply":"2025-09-23T17:23:49.605543Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"\n## 3) Hyperspectral & η–φ Views\n","metadata":{}},{"cell_type":"code","source":"def hyperspectral_cube(X, Y, I, box=3.2, grid=160, n_lambda=12):\n    H = W = int(grid)\n    xs = np.linspace(-box, box, W); ys = np.linspace(-box, box, H)\n    cube = np.zeros((int(n_lambda), H, W), dtype=float)\n    shifts = np.random.uniform(-2.5, 2.5, size=X.shape[0])\n    widths = np.random.uniform(0.6, 1.2, size=X.shape[0])\n    for r in range(X.shape[0]):\n        x=X[r,:]; y=Y[r,:]; inten=I[r,:]\n        m = ~np.isnan(x)&~np.isnan(y)&~np.isnan(inten)\n        if not np.any(m): continue\n        ix = np.clip(((x[m]-xs[0])/(xs[-1]-xs[0])*(W-1)).astype(int), 0, W-1)\n        iy = np.clip(((y[m]-ys[0])/(ys[-1]-ys[0])*(H-1)).astype(int), 0, H-1)\n        base = inten[m]\n        shift = shifts[r]; width = widths[r]\n        for li in range(int(n_lambda)):\n            spec = np.exp(-0.5*((li + shift)/max(width,1e-3))**2)\n            for k in range(ix.size):\n                cube[li, iy[k], ix[k]] += base[k]*spec\n    return cube\n\ndef calo_map_from_tracks(X, Y, Z, I, n_eta=40, n_phi=60, eta_max=3.0):\n    eta_vals=[]; phi_vals=[]; w=[]\n    for r in range(X.shape[0]):\n        x=X[r,:]; y=Y[r,:]; z=Z[r,:]; inten=I[r,:]\n        m = ~np.isnan(x)&~np.isnan(y)&~np.isnan(z)&~np.isnan(inten)\n        idx = np.where(m)[0]\n        if idx.size < 2: continue\n        dx=np.diff(x[idx]); dy=np.diff(y[idx]); dz=np.diff(z[idx])\n        px,py,pz = dx,dy,dz\n        p = np.sqrt(px**2+py**2+pz**2)+1e-12\n        eta = 0.5*np.log((p+pz+1e-12)/(p-pz+1e-12))\n        phi = (np.arctan2(py,px)+2*np.pi)%(2*np.pi)\n        eta_vals.append(eta); phi_vals.append(phi); w.append(inten[idx[:-1]])\n    if not eta_vals:\n        H = np.zeros((n_eta, n_phi)); edges_eta=np.linspace(-eta_max, eta_max, int(n_eta)+1); edges_phi=np.linspace(0,2*np.pi,int(n_phi)+1)\n        return H, edges_eta, edges_phi\n    eta_vals=np.concatenate(eta_vals); phi_vals=np.concatenate(phi_vals); w=np.concatenate(w)\n    edges_eta=np.linspace(-eta_max, eta_max, int(n_eta)+1); edges_phi=np.linspace(0,2*np.pi,int(n_phi)+1)\n    H,_,_ = np.histogram2d(eta_vals, phi_vals, bins=[edges_eta, edges_phi], weights=w)\n    return H, edges_eta, edges_phi","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T17:23:49.608064Z","iopub.execute_input":"2025-09-23T17:23:49.608375Z","iopub.status.idle":"2025-09-23T17:23:49.632311Z","shell.execute_reply.started":"2025-09-23T17:23:49.608345Z","shell.execute_reply":"2025-09-23T17:23:49.631342Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"\n## 4) Visualization (Matplotlib + Plotly if available)\n","metadata":{}},{"cell_type":"code","source":"def view_matplotlib_3d(X, Y, Z, box=3.2, elev=22, azim=35, title=\"3D Tracks\"):\n    fig = plt.figure(figsize=(7,6))\n    ax = fig.add_subplot(111, projection='3d')\n    for r in range(X.shape[0]):\n        x=X[r,:]; y=Y[r,:]; z=Z[r,:]\n        m = ~np.isnan(x)&~np.isnan(y)&~np.isnan(z)\n        ax.plot(x[m], y[m], z[m], linewidth=0.8)\n    ax.set_xlim(-box,box); ax.set_ylim(-box,box); ax.set_zlim(-box,box)\n    ax.view_init(elev=elev, azim=azim)\n    ax.set_xlabel(\"x\"); ax.set_ylabel(\"y\"); ax.set_zlabel(\"z\")\n    ax.set_title(title)\n    plt.show()\n\ndef plotly_3d_lines(X, Y, Z, box=3.2, title=\"3D Tracks (Plotly)\"):\n    try:\n        import plotly.graph_objects as go\n    except Exception:\n        print(\"Plotly not available.\"); return None\n    fig = go.Figure()\n    for r in range(X.shape[0]):\n        x=X[r,:]; y=Y[r,:]; z=Z[r,:]\n        m = (~np.isnan(x))&(~np.isnan(y))&(~np.isnan(z))\n        fig.add_trace(go.Scatter3d(x=x[m], y=y[m], z=z[m], mode='lines', line=dict(width=2), showlegend=False))\n    lim=box\n    fig.update_scenes(xaxis=dict(range=[-lim,lim]), yaxis=dict(range=[-lim,lim]), zaxis=dict(range=[-lim,lim]))\n    fig.update_layout(title=title, height=650)\n    return fig\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T17:23:49.650331Z","iopub.execute_input":"2025-09-23T17:23:49.650602Z","iopub.status.idle":"2025-09-23T17:23:49.660327Z","shell.execute_reply.started":"2025-09-23T17:23:49.650581Z","shell.execute_reply":"2025-09-23T17:23:49.659449Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"\n## 5) Interactive Controls\n","metadata":{}},{"cell_type":"code","source":"# --- Kaggle-friendly renderer patch (safe if Plotly missing) ---\ntry:\n    import plotly.io as pio\n    # 'notebook_connected' works well on Kaggle; fallback to 'notebook' if needed\n    pio.renderers.default = \"notebook_connected\"\nexcept Exception:\n    pass\n\nfrom IPython.display import display  # explicit display avoids silent no-render\n\ndef _show_plotly(fig):\n    \"\"\"Explicitly display a Plotly figure (fixes silent non-render inside ipywidgets).\"\"\"\n    if fig is not None:\n        display(fig)\n\ndef run_event(\n    n_secondaries=140, p0=3.2, spread=0.6,\n    Ex=0.0, Ey=0.0, Ez=0.0, Bz=0.6,\n    dt=0.03, steps=360, box=3.2,\n    n_eta=40, n_phi=60, eta_max=3.0,\n    show_calo=True, show_3d=True, show_hyper=True,\n    n_lambda=12, grid=160, seed=10\n):\n    \"\"\"\n    Generate an event, simulate motion, and render views.\n    Returns (X, Y, Z, I) so you can export or post-process if desired.\n    \"\"\"\n    np.random.seed(int(seed))\n    parts = gen_event(n_secondaries=int(n_secondaries), p0=float(p0), spread=float(spread))\n    X, Y, Z, I = simulate(\n        parts,\n        E=np.array([Ex, Ey, Ez]),\n        B=np.array([0.0, 0.0, Bz]),\n        dt=float(dt),\n        steps=int(steps)\n    )\n\n    # 3D view (Plotly with explicit display; fallback to matplotlib)\n    if show_3d:\n        fig = None\n        try:\n            if PLOTLY:\n                fig = plotly_3d_lines(X, Y, Z, box=box, title=\"3D Tracks (Plotly)\")\n                _show_plotly(fig)\n        except Exception:\n            fig = None\n        if (not PLOTLY) or (fig is None):\n            # Robust fallback\n            view_matplotlib_3d(X, Y, Z, box=box, title=\"3D Tracks (matplotlib)\")\n\n    # Calorimeter η–φ map\n    if show_calo:\n        H, e_eta, e_phi = calo_map_from_tracks(\n            X, Y, Z, I,\n            n_eta=int(n_eta), n_phi=int(n_phi), eta_max=float(eta_max)\n        )\n        plt.figure(figsize=(7, 4))\n        plt.imshow(\n            H.T, origin=\"lower\", aspect=\"auto\",\n            extent=[e_eta[0], e_eta[-1], e_phi[0], e_phi[-1]]\n        )\n        plt.xlabel(\"η\"); plt.ylabel(\"φ [rad]\")\n        plt.title(\"Calorimeter η–φ Energy\")\n        plt.colorbar(label=\"Energy (arb.)\")\n        plt.show()\n\n    # Hyperspectral slice (λ=0 by default)\n    if show_hyper:\n        cube = hyperspectral_cube(\n            X, Y, I, box=float(box), grid=int(grid), n_lambda=int(n_lambda)\n        )\n        plt.figure(figsize=(6, 5))\n        plt.imshow(cube[0], origin=\"lower\")\n        plt.title(\"Hyperspectral slice λ=0\")\n        plt.xlabel(\"x pixel\"); plt.ylabel(\"y pixel\")\n        plt.colorbar()\n        plt.show()\n\n    return X, Y, Z, I\n\n\n# --- Widgets UI (unchanged except it now works with the explicit display) ---\ntry:\n    from ipywidgets import FloatSlider, IntSlider, Checkbox, VBox, HBox, interactive_output\n    IW = True\nexcept Exception:\n    IW = False\n\nif IW:\n    ui = VBox([\n        HBox([\n            IntSlider(description=\"secondaries\", min=20, max=300, step=10, value=140),\n            FloatSlider(description=\"p0\", min=1.0, max=8.0, step=0.1, value=3.2),\n            FloatSlider(description=\"spread\", min=0.1, max=1.0, step=0.05, value=0.6),\n            IntSlider(description=\"steps\", min=120, max=800, step=20, value=360),\n        ]),\n        HBox([\n            FloatSlider(description=\"Ex\", min=-0.8, max=0.8, step=0.05, value=0.0),\n            FloatSlider(description=\"Ey\", min=-0.8, max=0.8, step=0.05, value=0.0),\n            FloatSlider(description=\"Ez\", min=-0.8, max=0.8, step=0.05, value=0.0),\n            FloatSlider(description=\"Bz\", min=0.0, max=1.4, step=0.05, value=0.6),\n        ]),\n        HBox([\n            IntSlider(description=\"η bins\", min=20, max=80, step=2, value=40),\n            IntSlider(description=\"φ bins\", min=24, max=120, step=6, value=60),\n            FloatSlider(description=\"η max\", min=1.5, max=4.0, step=0.1, value=3.0),\n            IntSlider(description=\"seed\", min=0, max=9999, step=1, value=10),\n        ]),\n        HBox([\n            Checkbox(description=\"show calo\", value=True),\n            Checkbox(description=\"show 3D\", value=True),\n            Checkbox(description=\"show hyper\", value=True),\n        ])\n    ])\n    out = interactive_output(run_event, {\n        \"n_secondaries\": ui.children[0].children[0],\n        \"p0\": ui.children[0].children[1],\n        \"spread\": ui.children[0].children[2],\n        \"steps\": ui.children[0].children[3],\n        \"Ex\": ui.children[1].children[0],\n        \"Ey\": ui.children[1].children[1],\n        \"Ez\": ui.children[1].children[2],\n        \"Bz\": ui.children[1].children[3],\n        \"n_eta\": ui.children[2].children[0],\n        \"n_phi\": ui.children[2].children[1],\n        \"eta_max\": ui.children[2].children[2],\n        \"seed\": ui.children[2].children[3],\n        \"show_calo\": ui.children[3].children[0],\n        \"show_3d\": ui.children[3].children[1],\n        \"show_hyper\": ui.children[3].children[2],\n    })\n    display(ui, out)\nelse:\n    print(\"Widgets unavailable — call run_event(...) directly.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T17:23:49.661962Z","iopub.execute_input":"2025-09-23T17:23:49.662226Z","iopub.status.idle":"2025-09-23T17:23:55.659496Z","shell.execute_reply.started":"2025-09-23T17:23:49.662207Z","shell.execute_reply":"2025-09-23T17:23:55.658606Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"\n## 6) Export Utilities\n","metadata":{}},{"cell_type":"code","source":"from matplotlib import animation\n\ndef export_xy_gif(X, Y, outfile=\"tracks_xy.gif\", frames=240, box=3.2):\n    fig = plt.figure(figsize=(6,6))\n    ax = plt.gca(); ax.set_aspect('equal','box')\n    ax.set_xlim(-box, box); ax.set_ylim(-box, box)\n    lines = [ax.plot([],[])[0] for _ in range(X.shape[0])]\n\n    def init():\n        for ln in lines: ln.set_data([],[])\n        return lines\n\n    def update(f):\n        for r, ln in enumerate(lines):\n            x=X[r,:]; y=Y[r,:]\n            m = ~np.isnan(x)&~np.isnan(y)\n            idx = np.where(m)[0]\n            if idx.size == 0: ln.set_data([], [])\n            else: ln.set_data(x[:min(f, idx[-1])], y[:min(f, idx[-1])])\n        return lines\n\n    ani = animation.FuncAnimation(fig, update, frames=frames, init_func=init, blit=False, interval=80)\n    try:\n        ani.save(outfile, writer='pillow', fps=12); print(f\"Saved: {outfile}\")\n    except Exception as ex:\n        print(\"Could not save GIF:\", ex)\n\ndef save_event_json(X, Y, Z, I, path=\"event.json\"):\n    import json\n    obj = dict(X=X.tolist(), Y=Y.tolist(), Z=Z.tolist(), I=I.tolist())\n    with open(path, \"w\", encoding=\"utf-8\") as f:\n        json.dump(obj, f)\n    print(f\"Saved JSON: {path}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T17:23:55.660379Z","iopub.execute_input":"2025-09-23T17:23:55.660596Z","iopub.status.idle":"2025-09-23T17:23:55.67101Z","shell.execute_reply.started":"2025-09-23T17:23:55.660579Z","shell.execute_reply":"2025-09-23T17:23:55.670095Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# en fin","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-23T17:23:55.671732Z","iopub.execute_input":"2025-09-23T17:23:55.672016Z","iopub.status.idle":"2025-09-23T17:23:55.693477Z","shell.execute_reply.started":"2025-09-23T17:23:55.671988Z","shell.execute_reply":"2025-09-23T17:23:55.692434Z"}},"outputs":[],"execution_count":null}]}